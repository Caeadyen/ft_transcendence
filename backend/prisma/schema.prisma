generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Status {
  ONLINE
  OFFLINE
  INGAME
}

model User {
  id                            Int              @id @default(autoincrement())
  displayName                   String?          @unique
  name                          String?          @default("")
  userName                      String?          @unique
  email                         String?          @default("")
  activated2FA                  Boolean          @default(false)
  twoFactorAuthenticationSecret String?
  refreshToken                  String?
  currentStatus                 Status           @default(OFFLINE)
  following                     User[]           @relation("UserFriend")
  followedBy                    User[]           @relation("UserFriend")
  blocked                       User[]           @relation("UserBlocked")
  blockedBy                     User[]           @relation("UserBlocked")
  matches                       PlayersOnMatch[]
  avatar                        UserAvatar       @relation(fields: [avatarId], references: [id])
  avatarId                      Int              @default(1)
}

model PlayersOnMatch {
  player   User  @relation(fields: [playerId], references: [id])
  playerId Int
  match    Match @relation(fields: [matchId], references: [id])
  matchId  Int
  score    Int   @default(0)

  @@id([playerId, matchId])
}

model Match {
  id        Int              @id @default(autoincrement())
  players   PlayersOnMatch[]
  completed Boolean?         @default(false) // can it be infered from end beeing set?
  start     DateTime?
  end       DateTime?
}

model UserAvatar {
  id       Int     @id @default(autoincrement())
  userId   User[]
  private  Boolean @default(true)
  filename String  @unique
}
